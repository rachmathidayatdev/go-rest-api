package mocks

import (
	"context"

	"github.com/stretchr/testify/mock"
	"github.com/typical-go/typical-rest-server/app/book/models"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

//GetBook func
func (s Service) GetBook(id int64) (*models.Book, error) {
	arg := s.Mock.Called(id)

	var book *models.Book
	if result, ok := arg.Get(0).(func(int64) *models.Book); ok {
		book = result(id)
	} else {
		if arg.Get(0) != nil {
			book, _ = arg.Get(0).(*models.Book)
		}
	}

	var err error
	if result, ok := arg.Get(1).(func(int64) error); ok {
		err = result(id)
	} else {
		err = arg.Error(1)
	}

	return book, err
}

//ListBook func
func (s Service) ListBook() ([]*models.Book, error) {
	arg := s.Mock.Called()

	var book []*models.Book
	if result, ok := arg.Get(0).([]*models.Book); ok {
		book = result
	} else {
		if arg.Get(0) != nil {
			book, _ = arg.Get(0).([]*models.Book)
		}
	}

	var err error
	if result, ok := arg.Get(1).(error); ok {
		err = result
	} else {
		err = arg.Error(1)
	}

	return book, err
}

//CreateBook func
func (s Service) CreateBook(ctx context.Context, book interface{}) (int64, error) {
	bookParse, _ := book.(*models.Book)
	arg := s.Mock.Called(ctx, bookParse)

	var lastInsertID int64
	if result, ok := arg.Get(0).(func(context.Context, *models.Book) int64); ok {
		lastInsertID = result(ctx, bookParse)
	} else {
		lastInsertID = arg.Get(0).(int64)
	}

	var err error
	if result, ok := arg.Get(1).(func(context.Context, *models.Book) error); ok {
		err = result(ctx, bookParse)
	} else {
		err = arg.Error(1)
	}

	return lastInsertID, err
}

//UpdateBook func
func (s Service) UpdateBook(ctx context.Context, book interface{}) error {
	bookParse, _ := book.(*models.Book)
	arg := s.Mock.Called(ctx, bookParse)

	var err error
	if result, ok := arg.Get(0).(func(context.Context, *models.Book) error); ok {
		err = result(ctx, bookParse)
	} else {
		err = arg.Error(0)
	}

	return err
}

//DeleteBook func
func (s Service) DeleteBook(ctx context.Context, id int64) error {
	arg := s.Mock.Called(ctx, id)

	var err error
	if result, ok := arg.Get(0).(func(context.Context, int64) error); ok {
		err = result(ctx, id)
	} else {
		err = arg.Error(0)
	}

	return err
}
